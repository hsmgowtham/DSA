"""
QuickSort Algorithm:
------------------------
- Quick Sort: Efficient sorting algorithm.
- Works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot.
- The sub-arrays are then recursively sorted.
- Time complexity: O(n log n) on average, O(n^2) in the worst case (rare).
- Space complexity: O(log n) for the recursive call stack.
- It's an in-place sorting algorithm, meaning it doesn't require extra space proportional to the size of the input data.
- Quick Sort is widely used due to its average-case time complexity and good performance in practice.
"""


# Function to find the partition position
def partition(array, low, high):
    # Choose the rightmost element as pivot
    pivot = array[high]

    i = low - 1  # Pointer for greater element

    # Traverse through all elements, compare each element with pivot
    for j in range(low, high):
        if array[j] <= pivot:
            # If element smaller than pivot is found,

            # swap it with the greater element pointed by i
            i = i + 1

            (array[i], array[j]) = (array[j], array[i])

    # Swap the pivot element with the greater element specified by i
    (array[i + 1], array[high]) = (array[high], array[i + 1])
    # Return the position from where partition is done
    return i + 1


# Function to perform quicksort
def quicksort(array, low, high):
    if low < high:
        # Find pivot element, elements smaller than pivot are on the left,
        # elements greater than pivot are on the right
        pi = partition(array, low, high)

        # Recursive call on the left of pivot
        quicksort(array, low, pi - 1)
        # Recursive call on the right of pivot
        quicksort(array, pi + 1, high)


if __name__ == "__main__":
    array = [10, 7, 8, 9, 1, 5]
    N = len(array)
    quicksort(array, 0, N - 1)
    print("Sorted array:")
    for x in array:
        print(x, end=" ")
